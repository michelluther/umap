[comment encoding = UTF-8 /]
[module generateClass('http://www.eclipse.org/uml2/3.0.0/UML')/]
[import com::tts::umap::services::abapServices /]
[import com::tts::umap::nuggetExport::generateAttributes /]
[import com::tts::umap::nuggetExport::generateMethods /]



[comment  This will generate a class or exception class stub with all source sections as well
		  as the neccessary header files for the class and MEthods /]
[template public generateClass(c : Class) ? (isValid(c) and not isBaseException(c)) post (trim())]
[createClassHeader(c)/]

[comment]Public Section definition[/comment]
[createPublicSection(c)/]

<protectedSection>
	protected  section.
	[createClassSourceDefinition(c, VisibilityKind::protected)/]
</protectedSection>

<privateSection>
	private section.
	[createClassSourceDefinition(c, VisibilityKind::private)/]  
</privateSection>

[comment]Not supported right now, who needs macros anyway[/comment]
<localImplementation></localImplementation>
<localTypes></localTypes>
<localMacros></localMacros>

[if (c.superClass->notEmpty())]
	<inheritance 
		CLSNAME="[c.name.toUpper()/]" 
		REFCLSNAME="[c.superClass.name.toUpper()/]" 
		VERSION="1" 
		STATE="1" 
		AUTHOR="[getAuthor('bla')/]" 
		CREATEDON="[getDate('bla')/]" 
		CHANGEDON="00000000"
	/>
[/if]
[generateAttributes(c)/]
[comment] Methoden Source start [/comment]
[generateMethods(c.ownedOperation)/]
[if (isException(c))]
[createExceptionConstructor(c.name.toUpper())/]	
[/if]
</CLAS>
[/template]

[template public createPublicSection (c : Class) ]
<publicSection>class [c.name.toUpper()/] definition
	public
	[if (c.superClass->notEmpty())]
		inheriting from	[c.superClass.name.toUpper()/]
	[/if]
	[if (c.isAbstract) and not isException(c)]
		abstract
	[/if]
	create public .
	public section.
	[createClassSourceDefinition(c, VisibilityKind::public)/] 
</publicSection>
[/template]

[comment This Template generates the Class Definitions as XML Tags. These are basically the Values 
		 which will be stored and used in the SAP System. Generating only the Sources is not enough for 
		 Global Abap Classes. SE34/SE80 needs these values as well. /]
[template public createClassHeader (c : Class) post (trim()) ]
<CLAS 
	CLSNAME="[c.name.toUpper()/]" 
	VERSION="1" LANGU="[getLangu('bla')/]" 
	DESCRIPT="[setDescription(c)/]" 
	UUID="[getUUID('bla')/]"
	[comment Categrory is for Class Categrory:
			 Normal Classes = 00
			 Exception classes = 40
			 persistence classes etc. /]
	CATEGORY="[getCategory(c)/]" 
	EXPOSURE="[getAbapVisibility(c.visibility.toString())/]" 
	STATE="1" 
	RELEASE="0" 
	AUTHOR="[getAuthor('bla')/]" 
	CREATEDON="[getDate('bla')/]" 
	CHANGEDON="00000000" 
	CHGDANYON="00000000" 
	CLSCCINCL="X" 
	FIXPT="X" 
	UNICODE="X" 
	R3RELEASE="[getRelease('bla')/]" 
	CLSBCCAT="00" 
	DURATION_TYPE="0 " 
	RISK_LEVEL="0"
	REFCLSNAME="[if (c.superClass->notEmpty())][c.superClass.name.toUpper()/][/if]"		
>
	[for (i : Interface | c.interfaceRealization.target)]
		[createInterfaceIncludes(i, c.name.toUpper())/]
	[/for]
[/template]

[template public createInterfaceIncludes(i : Interface, parent : String) post (trim())]
		[for (ii : Interface | i.general)]
		[createInterfaceIncludes(ii, parent)/]
		[/for]
		<implementing 
		CLSNAME="[parent/]" 
		REFCLSNAME="[i.name.toUpper()/]" 
		VERSION="1" 
		EXPOSURE="[getAbapVisibility(i.visibility.toString())/]" 
		STATE="1" 
		AUTHOR="[getAuthor('bla')/]" 
		CREATEDON="[getDate('bla')/]" 
		CHANGEDON="00000000" 
		[comment What is this? /]
		RELTYPE="1"
		/>
[/template]

[comment  Creates the class source /]
[template protected createClassSourceDefinition(c : Class, v : VisibilityKind)post (trim())]
	[if (v = VisibilityKind::public)]	
	[createInterfacesSource(c)/]
	[/if]
	[createAttributes(c, v)/]
	[comment  /]
	[for (op : Operation| getOperationByVisibility(c, v))]
	[createMethodSourceDefinition(op)/].
	[/for] 
[/template]

[comment  creates attributes according to their visibility/]
[template public createAttributes(c : Class, visibility : VisibilityKind) post (trim())]
	[for (att : Property | getAttributeByVisibility(c, visibility))]
		[if (att.isStatic)]class-[/if]data [att.name.toUpper()/] type [if ((isAbapRef(att)) or (isReference(att)) )] ref to [/if] [att.type.name.toUpper()/][if (isReadOnly(att))] read-only[/if].	
	[/for]	
[/template]

[comment creates Interface source definition /]
[template public createInterfacesSource(c : Class) post (trim())]
	[for (intf : Interface | c.interfaceRealization.target)]
	interfaces [intf.name.toUpper()/].	
	[/for]
[/template]



[template public createMethodSourceDefinition(op : Operation) post (trim())]
	[if (op.isStatic)]
	class-[/if]methods [op.name.toUpper()/] [test(op)/]	
[/template]

[template public test(operation : Operation) post (trim())]
[if ( hasDirection(operation, 'in'))]
	importing [getImportingParameter(operation.ownedParameter)/]
[/if]
[if (hasDirection(operation, 'out'))]
	exporting [getExportingParameter(operation.ownedParameter)/]	
[/if]
[if (hasDirection(operation, 'inout'))]
	changing [getChangingParameter(operation.ownedParameter)/]	
[/if]
[if (hasDirection(operation, 'return'))]
	returning value(r_return) type [getReturningParameter(operation.ownedParameter)/]	
[/if]  
[if (operation.raisedException->notEmpty())]
	raising
[for (e : Class | operation.raisedException)]
	[e.name.toUpper()/]
[/for]
[/if]	
[/template]

[comment  Returns the importing Parameter Source/]
[template public getImportingParameter(paa : Set(Parameter)) post (trim())]
	[for (pa : Parameter | getParameterByDirection(paa, 'in'))]
		![pa.name/] type [if (isAbapRef(pa))] ref to [/if][pa.type.name.toUpper()/][if (pa.lower = 0)] optional[/if]
	[/for]
[/template]

[comment  Returns the exporting Parameter Source/]
[template public getExportingParameter(paa : Set(Parameter))post (trim())]
	[for (pa : Parameter | getParameterByDirection(paa, 'out'))]
		![pa.name/] type [if (isAbapRef(pa))] ref to [/if][pa.type.name.toUpper()/]
	[/for]
[/template]

[comment  Returns the changing Parameter Source/]
[template public getChangingParameter(paa : Set(Parameter))post (trim())]
	[for (pa : Parameter | getParameterByDirection(paa, 'inout'))]
		![pa.name/] type [if (isAbapRef(pa))] ref to [/if][pa.type.name.toUpper()/][if (pa.lower = 0)] optional[/if]
	[/for]
[/template]

[comment  Returns the retunrning Parameter Source/]
[template public getReturningParameter(paa : Set(Parameter))post (trim())]
	[for (pa : Parameter | getParameterByDirection(paa, 'return'))]
		[if (isAbapRef(pa))] ref to [/if] [pa.type.name.toUpper()/]	
	[/for]
[/template]

[comment  Returns the Category of the class yet onlynormal and Exception classes are supportet/]
[template public getCategory(c : Class) post (trim())]
	[if (isBaseException(c) or isException(c))]
		40
	[else]
		00
	[/if]
[/template]
